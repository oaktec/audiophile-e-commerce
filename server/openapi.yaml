openapi: 3.0.3
info:
  title: Audiophile E-Commerce API
  version: 1.0.0
  description: This is an API for an Audio E-Commerce Site.
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryID:
          type: integer
    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        active:
          type: boolean
    CartItem:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
paths:
  /auth/register:
    post:
      summary: Register a new user
      description: This method allows you to create a new user.
      operationId: registerUser
      requestBody:
        description: User information to register a new account
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                address:
                  type: string
              required:
                - email
                - password
                - firstName
                - lastName
                - address
      responses:
        "200":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID of the newly registered user
        "400":
          description: One or more of the required fields is missing or invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
  /auth/login:
    post:
      summary: Login a user
      description: Log in a user by their email and password.
      operationId: loginUser
      requestBody:
        description: User email and password for logging in
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID of the logged-in user
                  token:
                    type: string
                    description: Token for future authentication
        "400":
          description: One or more of the required fields is missing or invalid.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized. Invalid email or password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
  /auth/logout:
    post:
      summary: Logout a user
      operationId: logoutUser
      responses:
        "200":
          description: User logged out successfully
        "401":
          description: Unauthorized. Invalid token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products:
    get:
      summary: Retrieve products
      description: Retrieve a list of products. Can be filtered by category.
      operationId: getProducts
      parameters:
        - name: category
          in: query
          description: ID of the category to filter by
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "500":
          description: An error occurred while processing the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Retrieve a product
      description: Retrieve a product by its ID.
      operationId: getProduct
      parameters:
        - name: productId
          in: path
          description: ID of the product to retrieve
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{userId}:
    get:
      summary: Retrieve a user
      description: Retrieve a user by their ID.
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to retrieve
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  firstName:
                    type: string
                  lastName:
                    type: string
                  address:
                    type: string
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user
      description: Update a user by their ID.
      operationId: updateUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to update
          required: true
          schema:
            type: integer
      requestBody:
        description: User information to update
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                address:
                  type: string
              required:
                - email
                - password
                - firstName
                - lastName
                - address
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: User ID of the updated user
        "400":
          description: One or more of the required fields is missing or invalid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
    delete:
      summary: Delete a user
      description: Delete a user by their ID.
      operationId: deleteUser
      parameters:
        - name: userId
          in: path
          description: ID of the user to delete
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: User deleted successfully
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: An error occurred while processing the request
  /cart:
    post:
      summary: Create a new cart
      responses:
        "200":
          description: The created cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
  /cart/{cartId}:
    post:
      summary: Add a product to the cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: The updated cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    get:
      summary: Get a specific cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: The requested cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    delete:
      summary: Delete a specific cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
  /cart/{cartId}/{productId}:
    delete:
      summary: Remove a product from a specific cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successful operation
    put:
      summary: Update the quantity of a product in a specific cart
      parameters:
        - name: cartId
          in: path
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CartItem"
      responses:
        "200":
          description: The updated cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
