openapi: 3.0.3
info:
  title: Audiophile E-Commerce API
  version: 1.0.0
  description: This is an API for an Audio E-Commerce Site.
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          description: Error message
        name:
          type: string
          description: Error name
        status:
          type: number
          description: HTTP status code
    UserAuth:
      type: object
      properties:
        email:
          type: string
          format: email
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string
      required:
        - email
        - password
        - firstName
        - lastName
        - address
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        price:
          type: number
        categoryID:
          type: integer
    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        address:
          type: string

    Cart:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        active:
          type: boolean
    CartItem:
      type: object
      properties:
        productId:
          type: integer
        quantity:
          type: integer
paths:
  /auth/register:
    post:
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserAuth"
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                    description: The ID of the newly created user
                  email:
                    type: string
                    description: User's email address
                  firstName:
                    type: string
                    description: User's first name
                  lastName:
                    type: string
                    description: User's last name
                  address:
                    type: string
                    description: User's address
        "400":
          description: Bad request (invalid input parameters)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "409":
          description: Conflict (email already in use)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/login:
    post:
      summary: Login a user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
              required:
                - email
                - password
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: The ID of the logged in user
        "400":
          description: Bad request (incorrect email or password, or user already logged in)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/logout:
    post:
      summary: Logout a user
      operationId: logoutUser
      responses:
        "204":
          description: User logged out successfully
        "401":
          description: Unauthorized (user is not logged in)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      summary: Get user details by ID
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Bad request (invalid user ID)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized (user is not logged in)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "403":
          description: Forbidden (user does not have permission to access the data)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: Not Found (user does not exist)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a user
      operationId: updateUser
      parameters:
        - name: id
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "200":
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Invalid user ID or invalid user details provided
        "401":
          description: Unauthorized, you must be logged in to do that
        "403":
          description: Forbidden, you do not have permission to do that
        "409":
          description: Conflict, email already in use
    delete:
      summary: Delete a user
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: User deleted successfully
        "400":
          description: Invalid user ID
        "401":
          description: Unauthorized, you must be logged in to do that
        "403":
          description: Forbidden, you do not have permission to do that
  /products:
    get:
      summary: Get products
      description: Retrieve a list of products. Can be filtered by category.
      operationId: getProducts
      parameters:
        - name: category
          in: query
          description: ID of the category to filter by
          required: false
          schema:
            type: integer
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "400":
          description: Invalid category ID
  /products/{id}:
    get:
      summary: Get product details by ID
      operationId: getProductById
      parameters:
        - name: id
          in: path
          description: Unique ID of the product
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: A product
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "404":
          description: Product not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "400":
          description: Invalid product ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cart/{userId}:
    post:
      summary: Create a new cart for a user
      description: Creates a new cart for a user. Does not create a new cart if there's an existing active cart.
      operationId: createCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: Cart created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: User already has an active cart or invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      summary: Get active cart for a specific user
      operationId: getActiveCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Active cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "404":
          description: User does not have an active cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cart/{userId}/add/{productId}:
    post:
      summary: Add a product to a cart
      description: Adds a product to a cart. The quantity of the product to be added is specified in the request body.
      operationId: addProductToCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: Unique ID of the product
          required: true
          schema:
            type: integer
      requestBody:
        description: Quantity of the product to be added to the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 100
      responses:
        "200":
          description: Product added to cart successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        "400":
          description: Invalid user ID, invalid product ID, or invalid quantity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User does not have an active cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cart/{userId}/update/{productId}:
    patch:
      summary: Update the quantity of a product in the active cart of a user
      operationId: updateProductInCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: Unique ID of the product
          required: true
          schema:
            type: integer
      requestBody:
        description: New quantity of the product in the cart
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                quantity:
                  type: integer
                  minimum: 1
                  maximum: 100
  /cart/{userId}/remove/{productId}:
    delete:
      summary: Remove a product from the active cart of a user
      operationId: removeProductFromCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
        - name: productId
          in: path
          description: Unique ID of the product
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Product removed from cart successfully
        "400":
          description: Invalid user ID or invalid product ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User does not have an active cart or product is not in the cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /cart/{userId}/checkout:
    post:
      summary: Checkout the active cart of a user
      description: Checks out the active cart of a user. The active cart is then marked as inactive.
      operationId: checkoutCart
      parameters:
        - name: userId
          in: path
          description: Unique ID of the user
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: Cart checked out successfully
        "400":
          description: Invalid user ID
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "404":
          description: User does not have an active cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /health:
    get:
      summary: Health check
      description: Check the health of the API
      operationId: healthCheck
      responses:
        "200":
          description: API is healthy
